rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isParent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin()
      );
      
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.role in ['student', 'teacher'] &&
        (!request.resource.data.keys().hasAny(['isAdmin', 'customClaims']));
      
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.uid == userId &&
        !request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['role', 'isAdmin', 'customClaims']))
      );
      allow delete: if isAdmin();
    }

    // Classes collection
    match /classes/{classId} {
      // Teachers and admins can create classes
      allow create: if isTeacher() || isAdmin();

      // Teachers can read their own classes
      // Students can read classes they're enrolled in
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isTeacher() ||
        request.auth.uid in resource.data.students
      );

      // Teachers can update their own classes
      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.teacher == request.auth.uid
      );

      // Teachers can delete their own classes
      allow delete: if isAuthenticated() && (
        isAdmin() ||
        resource.data.teacher == request.auth.uid
      );

      // Sessions subcollection
      match /sessions/{sessionId} {
        allow create: if isAuthenticated() && (
          isAdmin() ||
          get(/databases/$(database)/documents/classes/$(classId)).data.teacher == request.auth.uid
        );

        allow read: if isAuthenticated() && (
          isAdmin() ||
          get(/databases/$(database)/documents/classes/$(classId)).data.teacher == request.auth.uid ||
          request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.students
        );

        allow update: if isAuthenticated() && (
          isAdmin() ||
          get(/databases/$(database)/documents/classes/$(classId)).data.teacher == request.auth.uid
        );

        allow delete: if isAuthenticated() && (
          isAdmin() ||
          get(/databases/$(database)/documents/classes/$(classId)).data.teacher == request.auth.uid
        );
      }
    }

    // Course materials collection
    match /materials/{materialId} {
      allow read: if true;
      allow create: if isTeacher() || isAdmin();
      allow update: if isTeacher() || isAdmin();
      allow delete: if isAdmin();
    }

    // Student progress collection
    match /progress/{progressId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) || 
        resource.data.parentId == request.auth.uid ||
        isTeacher() || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.studentId) ||
        isTeacher() ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Assignments collection
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isTeacher() || isAdmin();
      
      // Allow students to submit their assignments
      match /submissions/{userId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Parent-Student relationships
    match /parent-student/{relationId} {
      allow read: if isSignedIn() && (
        isOwner(resource.data.parentId) || 
        isOwner(resource.data.studentId) || 
        isAdmin()
      );
      allow create: if isParent() || isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Free content for guests
    match /free-content/{contentId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Iqra books collection
    match /iqra-books/{bookId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Student progress collection
    match /student-progress/{progressId} {
      allow read: if isAuthenticated();
      allow write: if isTeacher() || isAdmin();
    }
  }
}
